#!/usr/bin/env node

/**
 * Module dependencies.
 */
const env = process.env.NODE_ENV || 'local';
require('../utils/logger');
({ getMessages: global.messages } = require('../utils'));
const debug = require('debug')('payment:server');
const http = require('http');
const config = require('./config')(env);
const { Database } = require('../utils/database');

global.services = config.services;
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

app.set('port', config.server.port);
app.set('hostname', config.server.hostname);
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${app.get('port')}`
    : `Port ${app.get('port')}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

async function startServer() {
  try {
    console.log('starting server');
    server.on('error', onError);
    server.on('listening', onListening);
    await new Database(global.services('payment'));
    server.listen(app.get('port'), app.get('hostname'));
  } catch (err) {
    console.log('server can not be started.');
    console.log(err);
  }
}

startServer();
